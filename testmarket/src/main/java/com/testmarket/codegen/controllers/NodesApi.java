/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.testmarket.codegen.controllers;

import com.testmarket.codegen.model.Error;
import com.testmarket.codegen.model.ShopUnit;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-26T13:46:50.872481+04:00[Asia/Tbilisi]")
@Validated
@Tag(name = "nodes", description = "the nodes API")
public interface NodesApi {

    /**
     * GET /nodes/{id}
     * Получить информацию об элементе по идентификатору. При получении информации о категории также предоставляется информация о её дочерних элементах.  - для пустой категории поле children равно пустому массиву, а для товара равно null - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий. Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. 
     *
     * @param id Идентификатор элемента (required)
     * @return Информация об элементе. (status code 200)
     *         or Невалидная схема документа или входные данные не верны. (status code 400)
     *         or Категория/товар не найден. (status code 404)
     */
    @Operation(
        operationId = "nodesIdGet",
        tags = { "Базовые задачи" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Информация об элементе.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ShopUnit.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидная схема документа или входные данные не верны.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Категория/товар не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/nodes/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Object> nodesIdGet(
        @Parameter(name = "id", description = "Идентификатор элемента", required = true) @PathVariable("id") UUID id
    );

}
