/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.testmarket.codegen.controllers;

import com.testmarket.codegen.model.Error;
import com.testmarket.codegen.model.ShopUnitImportRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-26T13:46:50.872481+04:00[Asia/Tbilisi]")
@Validated
@Tag(name = "imports", description = "the imports API")
public interface ImportsApi {

    /**
     * POST /imports
     * Импортирует новые товары и/или категории. Товары/категории импортированные повторно обновляют текущие. Изменение типа элемента с товара на категорию или с категории на товар не допускается. Порядок элементов в запросе является произвольным.    - uuid товара или категории является уникальным среди товаров и категорий   - родителем товара или категории может быть только категория   - принадлежность к категории определяется полем parentId   - товар или категория могут не иметь родителя (при обновлении parentId на null, элемент остается без родителя)   - название элемента не может быть null   - у категорий поле price должно содержать null   - цена товара не может быть null и должна быть больше либо равна нулю.   - при обновлении товара/категории обновленными считаются **все** их параметры   - при обновлении параметров элемента обязательно обновляется поле **date** в соответствии с временем обновления   - в одном запросе не может быть двух элементов с одинаковым id   - дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400.  Гарантируется, что во входных данных нет циклических зависимостей и поле updateDate монотонно возрастает. Гарантируется, что при проверке передаваемое время кратно секундам. 
     *
     * @param shopUnitImportRequest  (optional)
     * @return Вставка или обновление прошли успешно. (status code 200)
     *         or Невалидная схема документа или входные данные не верны. (status code 400)
     */
    @Operation(
        operationId = "importsPost",
        tags = { "Базовые задачи" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Вставка или обновление прошли успешно."),
            @ApiResponse(responseCode = "400", description = "Невалидная схема документа или входные данные не верны.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/imports",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> importsPost(
        @Parameter(name = "ShopUnitImportRequest", description = "") @Valid @RequestBody(required = false) ShopUnitImportRequest shopUnitImportRequest
    );

}
