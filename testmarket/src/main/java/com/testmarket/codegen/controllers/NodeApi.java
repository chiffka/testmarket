/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.testmarket.codegen.controllers;

import org.springframework.format.annotation.DateTimeFormat;
import com.testmarket.codegen.model.Error;
import java.time.OffsetDateTime;
import com.testmarket.codegen.model.ShopUnitStatisticResponse;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-26T13:46:50.872481+04:00[Asia/Tbilisi]")
@Validated
@Tag(name = "node", description = "the node API")
public interface NodeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /node/{id}/statistic
     * Получение статистики (истории обновлений) по товару/категории за заданный полуинтервал [from, to). Статистика по удаленным элементам недоступна.  - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий.Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. - можно получить статистику за всё время. 
     *
     * @param id UUID товара/категории для которой будет отображаться статистика (required)
     * @param dateStart Дата и время начала интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @param dateEnd Дата и время конца интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400. (optional)
     * @return Статистика по элементу. (status code 200)
     *         or Некорректный формат запроса или некорректные даты интервала. (status code 400)
     *         or Категория/товар не найден. (status code 404)
     */
    @Operation(
        operationId = "nodeIdStatisticGet",
        tags = { "Дополнительные задачи" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Статистика по элементу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ShopUnitStatisticResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Некорректный формат запроса или некорректные даты интервала.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Категория/товар не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/node/{id}/statistic",
        produces = { "application/json" }
    )
    default ResponseEntity<ShopUnitStatisticResponse> nodeIdStatisticGet(
        @Parameter(name = "id", description = "UUID товара/категории для которой будет отображаться статистика", required = true) @PathVariable("id") UUID id,
        @Parameter(name = "dateStart", description = "Дата и время начала интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400.") @Valid @RequestParam(value = "dateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateStart,
        @Parameter(name = "dateEnd", description = "Дата и время конца интервала, для которого считается статистика. Дата должна обрабатываться согласно ISO 8601 (такой придерживается OpenAPI). Если дата не удовлетворяет данному формату, необходимо отвечать 400.") @Valid @RequestParam(value = "dateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateEnd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"id\" : \"3fa85f64-5717-4562-b3fc-2c963f66a444\", \"name\" : \"Оффер\", \"date\" : \"2022-05-28T21:12:01.000Z\", \"parentId\" : \"3fa85f64-5717-4562-b3fc-2c963f66a333\", \"price\" : 234, \"type\" : \"OFFER\" }, { \"id\" : \"3fa85f64-5717-4562-b3fc-2c963f66a444\", \"name\" : \"Оффер\", \"date\" : \"2022-05-28T21:12:01.000Z\", \"parentId\" : \"3fa85f64-5717-4562-b3fc-2c963f66a333\", \"price\" : 234, \"type\" : \"OFFER\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
